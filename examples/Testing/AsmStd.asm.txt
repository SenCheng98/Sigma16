; AsmStdStatements: test assembly of each statement in the standard architecture
; This file is part of Sigma16; see README and https://jtod.github.io/home/Sigma16/
; John O'Donnell, 2021

; This is a set of examples of all the statements in the Std
; architecture.  It should assemble without any syntax errors, but it
; isn't intended to be executed.

;-------------------------------------------------------------
; Std instructions
;-------------------------------------------------------------

; module statement
Stmts  module

; Std RX instructions

       brc0
       brc1
       jumpz    R2,12[R7]     ; f278 000c
       jumpnz   R8,13[R9]     ; f899 000d
       testset  R5,x[R0]      ; f50b 0003

; Std EXP instructions

       addc     R1,R2,R3      ; 4123
       muln     R11,R12,R13   ; 5bcd
       divn     R11,R12,R13   ; 6bcd
       push     R7,R8,R10     ; 878a
       pop      R7,R8,R10     ; 978a
       top      R7,R8,R10     ; a78a


       save     R2,R9,40[R14] ; e201 9e28
       restore  R2,R9,40[R14] ; e202 9e28
       shiftl   R5,R3,7       ; e503 3700
       shiftr   R4,R3,8       ; e404 3800
       logicw   R1,R2,R3,6    ; e105 2306
       logicb   R1,2,3,6,13   ; e106 236d
       extract  R1,3,5,R6,7   ; e107 3567
       extracti R2,3,5,R6,7   ; e208 3567


       save     r2,r9,40[r14] ; e201 9e28

; Std pseudoinstructions

       invw     R6,R7         ; e605 700c  logicw
       andw     R6,R7,R8      ; e605 7801  logicw
       orw      R6,R7,R8      ; e605 7807  logicw
       xorw     R6,R7,R8      ; e605 7806  logicw

       invb     R1,3,9        ; e106 390c  logicb
       andb     R2,3,4,5      ; e206 3451  logicb
       orb      R15,8,9,10    ; ef06 89a7  logicb
       xorb     R8,0,13,7     ; e806 0d76  logicb

       field    R6,3,7        ; e608 3700  extracti


;-------------------------------------------------------------
; Directives
;-------------------------------------------------------------

; org statement
;       org      $00a4
; bbb   add      R1,R2,R3     ; 0123  bbb  = 00a4 relocatable

; block statement
a1     data     1             ; 0001  a    = 00a5 relocatable
arr    block    5             ;       arr  = 00a6
a2     data     2             ; 0002  b    = 00ab relocatable

; equ statement
eight  equ      8             ;       eight = 0008 fixed
loop2  equ      loop          ;       loop2 = 0007 relocatable

; import statement
foo    import   Mod1,foo
f      import   Mod2,fcn

; export statement
       export   x             ; 0003 relocatable
       export   eight         ; 0008 fixed
       export   loop          ; 0007 relocatable
       export   loop2         ; 0007 relocatable

